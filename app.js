
const { Client, LocalAuth } = require('whatsapp-web.js');
const express = require('express');
const qrcode = require('qrcode');
const app = express();
const port = 4000;
const secret = process.env.SECRET;
const fs = require('fs');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const palabras = ["puto","huevos","pinche","loco","loca","locos","locas","metiche","metiches","ineptos","sexo"]

const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: {
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  }
});

let qrCodeData = '';

client.on('qr', (qr) => {
  qrcode.toDataURL(qr, (err, url) => {
    if (err) {
      console.error('Error al generar el QR:', err);
      return;
    }
    qrCodeData = url;
  });
});

client.on('ready', async (message) => {
  console.log('Cliente est√° listo');
});


//FUNCION PARA MANEJAR LAS PALABRAS CLAVES
client.on('message', async message => {
  if (message.from.endsWith("@g.us")) {
    const nameGroup = await message.getChat()
    if (nameGroup.name === "QUEJAS y EMERGENCIAS üö®üö®üö®") {
      console.log("ENTRO AL GRUPO QUEJAS y EMERGENCIAS üö®üö®üö®")
      const prohibir = palabras.some(palabra => message.body.toLowerCase().trim().includes(palabra))
      if (prohibir) {
        try {
          await message.delete(true)

          const chat = await message.getChat();
          const contact = await message.getContact();

          chat.sendMessage(`‚ö†Ô∏è *${contact.pushname || contact.number}*, tu mensaje fue eliminado por contener lenguaje inapropiado.`);

        } catch (error) {
          console.log("Error al eliminar mensaje inapropiado", error);
        }
      }
      switch (message.body.toLowerCase().trim()) {
          case "emergencia":
              await client.sendMessage(message.from, "üõë *PROTOCOLO DE ACCIDENTES* üõë\n\nSi est√°s presentando una situaci√≥n de accidente con un *bee*, reporta de inmediato con esta informaci√≥n:\n\nüìç *¬øQu√© pas√≥?* (ca√≠da, descarga el√©ctrica, otro):\nüßë‚Äçüîß *Nombre del bee accidentado:*\nüìå *Ubicaci√≥n exacta* (direcci√≥n + referencias):\n‚ö†Ô∏è *Estado del bee* (¬øconsciente? ¬øsignos visibles?):\nüî¢ *N√∫mero de servicio* (si aplica, en casa del cliente):\nüìû *Nombre y n√∫mero de quien reporta*:\nüì∑ *Foto del accidente (si es posible):*\n\nüßò Mant√©n la calma\nüì≤ Una vez enviado el reporte, permanece atento a este grupo y tu tel√©fono para seguimiento.");
              //await client.sendMessage(message.from, `2. ACTIVACI√ìN DEL PROTOCOLO INTERNO\nMiguel Huitr√≥n, Gisel Arellano √≥ Elena Urrutia contin√∫an con el seguimiento y protocolo interno (√öNICOS AUTORIZADOS PARA LLEVAR A CABO EL PROCESO) y eval√∫an el accidente que se reporta y toman acci√≥n de los siguientes pasos:\n‚Ä¢ Urgencia: El bee est√° consciente, es un da√±o menor y puede desplazarse a una cl√≠nica del IMSS para atenci√≥n inmediata o al t√©rmino de ruta. Ejemplo: Cortaduras poco profundas.\n‚Ä¢ Emergencia: Cualquier riesgo f√≠sico o mental que presente el bee. Es necesario llamar a la ambulancia Multi Care ‚Äì Tel√©fono: 55 4571 5091\nIntegrantes del grupo ‚ÄòQUEJAS Y EMERGENCIAS‚Äô para notificaciones internas inmediatas:\n1. Direcci√≥n de operaciones o jefe directo - Responsable: Miguel Huitr√≥n. Cel: 55 6617 4338\n2. Direcci√≥n Bee Wow - Responsable: Gisel Arellano. Cel: 55 3038 2240\n3. √Årea de Recursos Humanos - Responsable: Elena Urrutia. Cel: 55 3007 8219\n4. Direcci√≥n General - Responsable: Jos√© Cant√∫\nTiempo m√°ximo: 10 minutos desde la recepci√≥n del reporte.`);
              //await client.sendMessage(message.from, `3. APOYO AL PERSONAL EN CAMPO\nUna vez realizada la notificaci√≥n con la informaci√≥n, debemos facilitar ayuda al t√©cnico.\n1. Verificar si el t√©cnico fue trasladado por ambulancia o requiere apoyo. Responsable: Miguel Huitr√≥n √≥ Gisel Arellano\n‚Ä¢ Coordinar que otro t√©cnico o supervisor acuda al lugar si est√° cerca. Responsable: Miguel Huitr√≥n √≥ Gisel Arellano\n‚Ä¢ Avisar al cliente sobre la situaci√≥n, si es necesario y con discreci√≥n. Responsable: Gisel Arellano`);
              break;
         /* case "reglas":
              // Aqu√≠ puedes a√±adir la l√≥gica que quieras para "reglas"
              await client.sendMessage(message.from, `üìú Reglas del Grupo üìú\n\n1Ô∏è‚É£ Respeto ante todo  \nTrata a todos los miembros con cortes√≠a y respeto. No se toleran insultos, burlas ni lenguaje ofensivo.\n\n2Ô∏è‚É£ Prohibido SPAM  \nüö´ Nada de publicidad, promociones o enlaces sin permiso de los administradores.\n\n3Ô∏è‚É£ Tem√°tica del grupo  \nüí¨ Mant√©n los mensajes dentro del prop√≥sito del grupo. Si es un grupo de soporte, evita desviar el tema.\n\n4Ô∏è‚É£ Evita mensajes innecesarios  \n‚ö†Ô∏è No env√≠es cadenas, stickers en exceso o mensajes repetitivos.\n\n5Ô∏è‚É£ Contenido inapropiado  \nüîû No se permite contenido ofensivo, violento, discriminatorio o sexual.\n\n6Ô∏è‚É£ Privacidad y seguridad  \nüîê No compartas informaci√≥n personal tuya o de otros miembros.\n\n7Ô∏è‚É£ Respeta a los administradores  \nüëÆ‚Äç‚ôÇÔ∏è Las decisiones de los admins son para mantener el orden y deben ser respetadas.\n\n---\n\nüõ†Ô∏è Sugerencias o dudas  \nEnv√≠a un mensaje con el comando *contacto* para hablar con un administrador.\n\nüôå ¬°Gracias por formar parte de este grupo!`)
              break;
          case "ayuda":
              await client.sendMessage(message.from, `üÜò Ayuda del Bot\nAqu√≠ tienes algunos comandos disponibles:\n\nüïí *horario* ‚Äì Ver el horario de atenci√≥n\nüìú *reglas* ‚Äì Ver las reglas del grupo\nüôã *info* ‚Äì Informaci√≥n general del grupo`);
              break;
          case "horario":
              await client.sendMessage(message.from, `üïí *Horario de atenci√≥n*\nLunes a Viernes: 9:00 AM ‚Äì 6:00 PM\nS√°bados: 10:00 AM ‚Äì 2:00 PM\nüìµ Domingos y feriados sin atenci√≥n`);
              break;
          case "info":
              await client.sendMessage(message.from, `‚ÑπÔ∏è Informaci√≥n del Grupo\nEste grupo fue creado para brindar soporte, compartir novedades y resolver tus dudas.\nPor favor revisa las reglas del grupo con el comando !reglas antes de participar.\nGracias por ser parte üôå`);
              break;
          // Puedes agregar m√°s casos si lo necesitas
          */
        }
    }
  }
})

// FUNCION PARA DETECTAR NUEVOS PARTICIPANTES EN EL GRUPO
/*
client.on('group_join', async (notification) => {
  const groupChat = await notification.getChat();
  console.log("GROUPCHAT", groupChat)
  const newParticipant = notification.recipientIds[0];
  console.log("NUEVO PARTICIPANTE", newParticipant)

  const contact = await client.getContactById(newParticipant);

  console.log("CONTACTO", contact)

  const nameParticipant = contact.pushname || contact.name || 'Usuario';
  console.log(newParticipant)

  groupChat.sendMessage(`üëã Bienvenido/a *${nameParticipant}* Por favor revisa las reglas del grupo con el comando: *reglas*`)
 })
  */


client.initialize();

// Validar n√∫mero
/*
app.get('/whatsapp/:numero', async (req, res) => {
  try {
    let numero = req.params.numero;
    const token = req.headers.authorization.split(" ")[1];
    const payload = jwt.verify(token, secret);

    if (Date.now() / 1000 > payload.exp) {
      return res.status(401).send({ error: true, message: "Token expirado" });
    }

    const data = await client.getNumberId(`${numero}`);
    if (data === null) return res.json({ status: 200, numberExist: false });

    return res.json({ status: 200, numberExist: true, user: data.user, server: data.server, _serialized: data._serialized });
  } catch (error) {
    console.log(error);
    await avisarPorCliq(`‚ùå Error al validar n√∫mero: ${error.message}`);
    return res.status(500).send({ message: "Error interno del servidor" });
  }
});
*/
// Enviar mensaje
/*
app.post('/whatsapp/messages/', async (req, res) => {
  const { numero, mensaje } = req.body;
  const datos = req.body;
  const token = req.headers.authorization?.split(" ")[1];

  try {
    if (!token) {
      return res.status(400).send({ error: true, message: "Token no proporcionado" });
    }

    const payload = jwt.verify(token, secret);
    if (Date.now() / 1000 > payload.exp) {
      return res.status(401).send({ error: true, message: "Token expirado" });
    }

    const data = await client.getNumberId(`${numero}`);
    if (data === null) return res.json({ status_code: 404, numberExist: false, numero });

    const job = await apiQueue.add(datos, { delay: 5000 });
    return res.status(200).send({ mensaje: "Whatsapp enviado correctamente", id: job.id, numero });
  } catch (error) {
    console.error("Error en el servidor:", error);
    await avisarPorCliq(`‚ùå Error en endpoint /whatsapp/messages: ${error.message}`);
    return res.status(500).send({ message: "Error interno del servidor", error: error.message });
  }
});
*/

// RUTA DONDE SE MANDA EL CODIGO QR A ESCANEAR
app.get('/', (req, res) => {
  if (qrCodeData) {
    res.send(`
      <h1>Escanea el c√≥digo QR con tu aplicaci√≥n de WhatsApp</h1>
      <img src="${qrCodeData}" alt="QR Code"/>
    `);
  } else {
    res.send('<h1>El c√≥digo QR a√∫n no est√° disponible. Int√©ntalo de nuevo m√°s tarde.</h1>');
  }
});

// Inicio de servidor
app.listen(port, () => {
  console.log(`Servidor corriendo correctamente en http://localhost:${port}`);
});
